#include <assert.h>
#include <errno.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <poll.h>
#include <time.h>
#include <string.h>
#include <pthread.h>
#include <signal.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <pthread.h>
#include <stdlib.h>
#include <stdio.h>

#include "socket.hh"
#include "ngscope_sync.h"
#include "ngscope_dci.h"
#include "ngscope_packet_list.h"
#include "ngscope_util.h"

#define DELAY_DIFF_THD 1400
//#include "acker.hh"

time_seg_t find_dl_mutli_cell_overlap(ngscope_dci_t* 	q[MAX_NOF_RF_DEV],
									int 			nof_cell)
{
	time_seg_t 	overlap;
	uint64_t 	start_t = q[0]->dl_dci.reTx_t_us[0];
	uint64_t 	end_t 	= q[0]->dl_dci.reTx_t_us[q[0]->dl_dci.nof_reTx-1];

	for(int i=0; i<nof_cell; i++){
		if(q[i]->dl_dci.reTx_t_us[0] > start_t){
			start_t = q[i]->dl_dci.reTx_t_us[0];
		}
		if(q[i]->dl_dci.reTx_t_us[q[i]->dl_dci.nof_reTx-1] < end_t){
			start_t = q[i]->dl_dci.reTx_t_us[q[i]->dl_dci.nof_reTx-1];
		}
	}

	overlap.start 	= start_t;
	overlap.end 	= end_t;

	return overlap;
}

// here we assume that two segments are synchronized
time_seg_t find_overlap_2seg(time_seg_t seg1,  time_seg_t seg2)
{
	time_seg_t time_seg = {0, 0};

	if( seg1.start >= seg2.end || seg2.start >= seg1.end){
        printf("two vector of timestamp has no overlap!\n");
	}else{
		time_seg.start 	= std::max(seg1.start, seg2.start);	
		time_seg.end 	= std::min(seg1.start, seg2.start);	
	}
	return time_seg;
}

int sync_dci_pkt_w_offset_single_cell(ngscope_dci_t* 	cell[MAX_NOF_RF_DEV],
                         				uint64_t* 	pkt_t_us, 
										time_seg_t 	time_seg,
                            			int  		offset_us,
						 				int 		nof_pkt){
    int delay_sum = 0;
	ngscope_dci_t* q = cell[0];

	// downlink retranmission 
	int nof_reTx 	= cell[0]->dl_dci.nof_reTx;

	for(int i=0; i< nof_pkt; i++){
		// the timestamp should fall into the time window
		if(pkt_t_us[i] < time_seg.start || pkt_t_us[i] > time_seg.end)
			continue;
		int min_offset = 0;
		for(int j=0; j<nof_reTx; j++){
			// the timestamp should fall into the time window
			if(q->dl_dci.reTx_t_us[j] < time_seg.start || q->dl_dci.reTx_t_us[j]  > time_seg.end)
				continue;
            int delay_diff = (int)abs((long)pkt_t_us[i] - (long)(q->dl_dci.reTx_t_us[j] + offset_us));
			if(j==0) min_offset = delay_diff;
			if(delay_diff < min_offset){
				min_offset = delay_diff;
			}
		}
        delay_sum += min_offset;
	}
	return delay_sum;
}

// TODO finish

int sync_dci_pkt_w_offset_multi_cell(ngscope_dci_t* 	q[MAX_NOF_RF_DEV],
                         				uint64_t* 	pkt_t_us, 
										time_seg_t 	time_seg,
                            			int  		offset_us,
						 				int 		nof_pkt,
										int 		nof_cell){
	return 0;
}

int sync_dci_pkt_w_offset(ngscope_dci_t* 	q[MAX_NOF_RF_DEV],
								uint64_t* 	pkt_t_us, 
								time_seg_t 	time_seg,
								int  		offset_us,
								int 		nof_pkt,
								int 		nof_cell){
 
    int delay_sum = 0;
	if(nof_cell == 1){
		delay_sum = sync_dci_pkt_w_offset_single_cell(q, pkt_t_us, time_seg,\
							offset_us, nof_pkt);
	}
	return delay_sum;
}

int min_in_vec(int* vec, int num){
    int min_v = vec[0];
    int     min_i  = 0;
    for(int i=0; i<num; i++){
        if(vec[i] < min_v){
            min_v = vec[i];
            min_i = i;
        }
    }
    return min_i;
}

void print_vec(uint64_t* vec, int num){
    for(int i=0; i<num; i++){
        printf("%ld ", vec[i]);
    }
    
    printf("\n");
}


// The implementation of the dci synchronization 
// array1 -> pkt timestamp vector
// array2 -> dci timestamp vector
int ngscope_sync_dci_pkt(uint64_t* array1, uint64_t* array2, int array_size1, int array_size2, int* offset_vec, int offset_size){
	long dist_min =0;
	int idx = 0;
    for(int i=0; i<offset_size; i++){
        int offset_us 	= offset_vec[i];
		long dist = correlate_2_vec_w_offset(array1, array2, array_size1, array_size2, offset_us);
		//printf("offset_us:%d dist:%ld ", offset_us, dist);
		if(i==0){
			dist_min = dist;
		}else{
			if(dist < dist_min){
				dist_min 	= dist;
				idx 		= i;
			}
		}
	}
	//printf("\n");
	return offset_vec[idx];
}
